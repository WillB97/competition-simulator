#!/usr/bin/env python3
"""
A script to run a competition match.
"""

import sys
import shutil
import argparse
import subprocess
from pathlib import Path
from zipfile import ZipFile

REPO_ROOT = Path(__file__).resolve().parent.parent

sys.path.insert(1, str(REPO_ROOT / 'modules'))

import controller_utils  # isort:skip
from controller_utils import NUM_ZONES  # isort:skip

NUM_CONTROLLERS = NUM_ZONES + 2


def get_zone_path(zone_id: int) -> Path:
    robot_file: Path = controller_utils.get_zone_robot_file_path(zone_id)
    return robot_file.parent


def construct_match_data(args: argparse.Namespace) -> controller_utils.MatchData:
    tlas = [
        tla if tla != '-' else None
        for tla in args.tla
    ]

    return controller_utils.MatchData(
        args.match_num,
        tlas,
        args.duration,
        recording_config=None,  # use the default
    )


def prepare_match(archives_dir: Path, match_data: controller_utils.MatchData) -> None:
    controller_utils.MODE_FILE.write_text('comp\n')
    controller_utils.record_match_data(match_data)

    for zone_id, tla in enumerate(match_data.teams):
        zone_path = get_zone_path(zone_id)

        if zone_path.exists():
            shutil.rmtree(zone_path)

        if tla is None:
            # no team in this zone
            continue

        zone_path.mkdir()
        with ZipFile(f'{archives_dir / tla}.zip') as zipfile:
            zipfile.extractall(zone_path)


def run_match() -> None:
    subprocess.check_call([
        'webots',
        '--batch',
        '--stdout',
        '--stderr',
        '--minimize',
        str(REPO_ROOT / 'worlds' / 'Arena.wbt'),
    ])


def collate_logs(archives_dir: Path, match_data: controller_utils.MatchData) -> None:
    """
    Copy the teams' logs into directories next to their original code archives.
    """

    for zone_id, tla in enumerate(match_data.teams):
        if tla is None:
            # no team in this zone
            continue

        log_filname = controller_utils.get_robot_log_filename(zone_id)
        log_path = get_zone_path(zone_id) / log_filname

        team_dir = archives_dir / tla
        team_dir.mkdir()

        shutil.copy(log_path, team_dir)


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        'archives_dir',
        help="The directory containing the user's robot code",
        type=Path,
    )
    parser.add_argument('match_num', help="The match number to run.")
    parser.add_argument(
        'tla',
        nargs=NUM_ZONES,
        help=(
            f"TLA of the team in each zone, in order from zone 0 to {NUM_ZONES - 1}. "
            "Use dash (-) for an empty zone. Must specify all zones."
        ),
    )
    parser.add_argument(
        '--duration',
        help="The duration of the match (in seconds).",
        type=int,
        default=controller_utils.GAME_DURATION_SECONDS,
    )
    return parser.parse_args()


def main(args: argparse.Namespace) -> None:
    match_data = construct_match_data(args)
    prepare_match(args.archives_dir, match_data)

    run_match()

    collate_logs(args.archives_dir, match_data)


if __name__ == '__main__':
    main(parse_args())
