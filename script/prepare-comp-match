#!/usr/bin/env python3
"""
A script to prepare for a competition match.
"""

import sys
import shutil
import argparse
from pathlib import Path
from zipfile import ZipFile

REPO_ROOT = Path(__file__).resolve().parent.parent

sys.path.insert(1, str(REPO_ROOT / 'modules'))

import controller_utils  # noqa:E402 # isort:skip
from controller_utils import NUM_ZONES  # isort:skip


def get_zone_path(zone_id: int) -> Path:
    robot_file: Path = controller_utils.get_zone_robot_file_path(zone_id)
    return robot_file.parent


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        'archives_dir',
        help="The directory containing the user's robot code",
        type=Path,
    )
    parser.add_argument('match_num', help="The match number to prepare for.")
    parser.add_argument(
        'tla',
        nargs=NUM_ZONES,
        help=(
            f"TLA of the team in each zone, in order from zone 0 to {NUM_ZONES - 1}. "
            "Use dash (-) for an empty zone. Must specify all zones."
        ),
    )
    return parser.parse_args()


def main(args: argparse.Namespace) -> None:
    tlas = [
        tla if tla != '-' else None
        for tla in args.tla
    ]

    controller_utils.MODE_FILE.write_text('comp\n')
    controller_utils.record_match_data(args.match_num, tlas)

    for zone_id, tla in enumerate(tlas):
        zone_path = get_zone_path(zone_id)

        if zone_path.exists():
            shutil.rmtree(zone_path)

        if tla is None:
            # no team in this zone
            continue

        zone_path.mkdir()
        with ZipFile(f'{args.archives_dir / tla}.zip') as zipfile:
            zipfile.extractall(zone_path)


if __name__ == '__main__':
    main(parse_args())
