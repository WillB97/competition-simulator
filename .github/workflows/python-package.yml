# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7, 3.8, 3.9]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Build checksum file
      run: |
        declare -a FILES=(
          "script/linting/requirements.txt"
          "script/typing/requirements.txt"
        )
        for f in ${FILES[@]}
        do
          echo "# $f" >> all-requirements.txt
          cat $f >> all-requirements.txt
        done
    - name: Cache dependencies
      uses: actions/cache@v2
      id: cache-dep
      with:
        path: venv
        key: deps-py${{ matrix.python-version }}-${{ hashfiles('all-requirements.txt') }}
    - name: Install Dependencies
      if: steps.cache-dep.outputs.cache-hit != 'true'
      run: |
        python3 -m venv venv
        venv/bin/pip install -U pip
        venv/bin/pip install -r all-requirements.txt
    - name: Test with unittest
      run: |
        source venv/bin/activate
        ./script/testing/test

  lint:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7, 3.9]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Build checksum file
      run: |
        declare -a FILES=(
          "script/linting/requirements.txt"
          "script/typing/requirements.txt"
        )
        for f in ${FILES[@]}
        do
          echo "# $f" >> all-requirements.txt
          cat $f >> all-requirements.txt
        done
    - name: Cache dependencies
      uses: actions/cache@v2
      id: cache-dep
      with:
        path: venv
        key: deps-py${{ matrix.python-version }}-${{ hashfiles('all-requirements.txt') }}
    - name: Install Dependencies
      if: steps.cache-dep.outputs.cache-hit != 'true'
      run: |
        python3 -m venv venv
        venv/bin/pip install -U pip
        venv/bin/pip install -r all-requirements.txt
    - name: Lint with flake8
      run: |
        source venv/bin/activate
        # Ignore TODOs on CI, for now, even though we do want them
        # highlighted in development.
        ./script/linting/lint $SCRIPTS --extend-ignore=T000

  typecheck:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7, 3.9]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Build checksum file
      run: |
        declare -a FILES=(
          "script/linting/requirements.txt"
          "script/typing/requirements.txt"
        )
        for f in ${FILES[@]}
        do
          echo "# $f" >> all-requirements.txt
          cat $f >> all-requirements.txt
        done
    - name: Cache dependencies
      id: cache-dep
      uses: actions/cache@v2
      with:
        path: venv
        key: deps-py${{ matrix.python-version }}-${{ hashfiles('all-requirements.txt') }}
    - name: Install Dependencies
      if: steps.cache-dep.outputs.cache-hit != 'true'
      run: |
        python3 -m venv venv
        venv/bin/pip install -U pip
        venv/bin/pip install -r all-requirements.txt
    - name: Typecheck with Mypy
      run: |
        source venv/bin/activate
        ./script/typing/check $SCRIPTS

  run-comp-match:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workspace }}
    steps:
      - uses: actions/checkout@v2
      - name: Docker Layer Caching
        uses: satackey/action-docker-layer-caching@v0.0.11
      - name: Run match
        run: |
          /usr/bin/docker run --workdir /github/workspace --rm \
          -e INPUT_ENTRYPOINT -e HOME -e GITHUB_JOB -e GITHUB_REF -e GITHUB_SHA -e GITHUB_REPOSITORY \
          -e GITHUB_REPOSITORY_OWNER -e GITHUB_RUN_ID -e GITHUB_RUN_NUMBER -e GITHUB_RETENTION_DAYS \
          -e GITHUB_ACTOR -e GITHUB_WORKFLOW -e GITHUB_HEAD_REF -e GITHUB_BASE_REF -e GITHUB_EVENT_NAME \
          -e GITHUB_SERVER_URL -e GITHUB_API_URL -e GITHUB_GRAPHQL_URL -e GITHUB_WORKSPACE -e GITHUB_ACTION \
          -e GITHUB_EVENT_PATH -e GITHUB_ACTION_REPOSITORY -e GITHUB_ACTION_REF -e GITHUB_PATH -e GITHUB_ENV \
          -e RUNNER_OS -e RUNNER_TOOL_CACHE -e RUNNER_TEMP -e RUNNER_WORKSPACE -e ACTIONS_RUNTIME_URL \
          -e ACTIONS_RUNTIME_TOKEN -e ACTIONS_CACHE_URL -e GITHUB_ACTIONS=true -e CI=true \
          --entrypoint "./.github/entrypoint.sh" \
          -v "/var/run/docker.sock":"/var/run/docker.sock" \
          -v "/home/runner/work/_temp/_github_home":"/github/home" \
          -v "/home/runner/work/_temp/_github_workflow":"/github/workflow" \
          -v "/home/runner/work/_temp/_runner_file_commands":"/github/file_commands" \
          -v "/home/runner/work/competition-simulator/competition-simulator":"/github/workspace" \
          cyberbotics/webots:R2021a-ubuntu20.04
#       - uses: docker://cyberbotics/webots:R2021a-ubuntu20.04
#         with:
#           entrypoint: ./.github/entrypoint.sh
      - name: Store archives
        uses: actions/upload-artifact@v2
        with:
          name: archives
          path: /home/runner/work/_temp/_github_home/archives

  build:
    runs-on: ubuntu-latest
    needs: [test, lint, typecheck]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: Build archive
      run: |
        mkdir archive
        export NAME="competition-simulator-$(git describe --always --tags).zip"
        ./script/create-archive --output archive/$NAME
    - name: Store archives
      uses: actions/upload-artifact@v2
      with:
        name: archive
        path: archive/*.zip
