version: 2.1

references:
  build-checksum-file: &build-checksum-file
    run:
      name: Build checksum file
      command: |
        declare -a FILES=(
          "script/linting/requirements.txt"
          "script/typing/requirements.txt"
        )
        for f in ${FILES[@]}
        do
          echo "# $f" >> all-requirements.txt
          cat $f >> all-requirements.txt
        done
  restore-dependencies-cache: &restore-dependencies-cache
    restore_cache:
      keys:
        - deps-1-py<< parameters.version >>-{{ checksum "all-requirements.txt" }}
  install-dependencies: &install-dependencies
    run:
      name: Install Dependencies
      command: |
        python3 -m venv venv
        venv/bin/pip install -r all-requirements.txt
  save-dependencies-cache: &save-dependencies-cache
    save_cache:
      key: deps-1-py<< parameters.version >>-{{ checksum "all-requirements.txt" }}
      paths:
        - venv
  parametrised-python-executor: &parametrised-python-executor
    parameters:
      version:
        type: string
    executor:
      name: python
      version: << parameters.version >>
  python-full-version-matrix: &python-full-version-matrix
    matrix:
      parameters:
        version: ["3.7", "3.8", "3.9"]
  python-top-and-bottom-version-matrix: &python-top-and-bottom-version-matrix
    matrix:
      parameters:
        version: ["3.7", "3.9"]
  filter-tags: &filter-tags
    filters:
      branches:
        ignore: /.*/
      tags:
        only: /.*/


executors:
  python:
    parameters:
      version:
        type: string
    docker:
      - image: circleci/python:<< parameters.version >>

jobs:
  test:
    <<: *parametrised-python-executor

    steps:
      - checkout

      - *build-checksum-file
      - *restore-dependencies-cache
      - *install-dependencies
      - *save-dependencies-cache

      - run:
          name: Run Tests
          command: |
            source venv/bin/activate
            ./script/testing/test

  lint:
    <<: *parametrised-python-executor

    steps:
      - checkout

      - *build-checksum-file
      - *restore-dependencies-cache
      - *install-dependencies
      - *save-dependencies-cache

      - run:
          name: Run Flake8
          command: |
            source venv/bin/activate

            # Ignore TODOs on CI, for now, even though we do want them
            # highlighted in development.
            ./script/linting/lint $SCRIPTS --extend-ignore=T000

  typecheck:
    <<: *parametrised-python-executor

    steps:
      - checkout

      - *build-checksum-file
      - *restore-dependencies-cache
      - *install-dependencies
      - *save-dependencies-cache

      - run:
          name: Run Mypy
          command: |
            source venv/bin/activate
            ./script/typing/check $SCRIPTS

  run-comp-match:
    docker:
      - image: cyberbotics/webots:R2020b-rev1-ubuntu20.04
    steps:
      - checkout

      - run:
          name: Install dependencies
          command: |
            # Use deadsnakes to get Python 3.7
            echo deb http://ppa.launchpad.net/deadsnakes/ppa/ubuntu focal main > /etc/apt/sources.list.d/deadsnakes.list
            echo deb-src http://ppa.launchpad.net/deadsnakes/ppa/ubuntu focal main >> /etc/apt/sources.list.d/deadsnakes.list
            apt-key adv --keyserver keyserver.ubuntu.com --recv-keys F23C5A6CF475977595C89F51BA6932366A755776

            export DEBIAN_FRONTEND=noninteractive
            apt-get update
            apt-get install --yes zip python3.7{,-dev,-venv}

      - run:
          name: Prepare team code archive
          command: |
            mkdir archives
            cd archives
            sed -r 's/# sleep(.*)/print("sleep\1")/' ../controllers/example_controller/example_controller.py > robot.py
            zip ABC.zip robot.py

      - run:
          # TODO: caching of these?
          name: Install libraries
          command: |
            python3.7 -m venv venv
            source venv/bin/activate
            pip install -r libraries.txt

      - run:
          name: Run match
          command: |
            source venv/bin/activate
            xvfb-run script/run-comp-match archives 42 - ABC --duration 5

      - store_artifacts:
          path: archives
          destination: .

  build:
    docker:
      - image: circleci/python:3.7
    steps:
      # Note: we run the release on *all* tags. If we change to creating
      # releases here (or anything more involved) we should review whether or
      # not we want to run the release only for a given pattern of tag names.

      - checkout

      - run:
          name: Build archive
          command: |
            mkdir archive
            NAME="competition-simulator-$(git describe --always --tags).zip"
            ./script/create-archive --output archive/$NAME

      - store_artifacts:
          # Note: the interim directory here is a work-around to not knowing the
          # exact filename of the archive we're creating (as it depends on the
          # tag name) and not being able to pass a wildcard name. Since we don't
          # want the directory in the stored results, we override the
          # destination to remove it.
          path: archive
          destination: .

workflows:
  version: 2.1

  build:
    jobs:
      - test:
          <<: *python-full-version-matrix
      - lint:
          <<: *python-top-and-bottom-version-matrix
      - typecheck:
          <<: *python-top-and-bottom-version-matrix
      - run-comp-match
      - build:
          requires:
            - test
            - lint
            - typecheck
          filters:
            branches:
              only: /.*/
            tags:
              only: /.*/
